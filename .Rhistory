hist(GS[,6],breaks=14,col='black',xlab="Expression rank",main="Gold standard")
range(1,2)
hist(GS[,6],breaks=14,col='black',xlab="Expression rank",main="Gold standard",xlim = range(0,3))
par(mfrow=c(2,3))
hist(elem[,4],breaks=50,col='black',xlab="Topological rank",main="IGF.1 network")
hist(elem[,5],breaks=10,col='black',xlab="Relevance rank",main="IGF.1 network")
hist(GS[,4],breaks=14,col='black',xlab="Topological rank",main="Gold standard")
hist(GS[,5],breaks=14,col='black',xlab="Relevance rank",main="Gold standard")
hist(elem[,6],breaks=50,col='black',xlab="Expression rank",main="IGF.1 network",xlim = range(0,3))
hist(GS[,6],breaks=14,col='black',xlab="Expression rank",main="Gold standard",xlim = range(0,3))
par(mfrow=c(2,3))
hist(elem[,4],breaks=50,col='black',xlab="Topological rank",main="IGF.1 network",xlim = range(0,150))
hist(elem[,5],breaks=10,col='black',xlab="Relevance rank",main="IGF.1 network")
hist(elem[,6],breaks=50,col='black',xlab="Expression rank",main="IGF.1 network",xlim = range(0,3))
hist(GS[,4],breaks=14,col='black',xlab="Topological rank",main="Gold standard",xlim = range(0,150))
hist(GS[,5],breaks=14,col='black',xlab="Relevance rank",main="Gold standard")
hist(GS[,6],breaks=14,col='black',xlab="Expression rank",main="Gold standard",xlim = range(0,3))
hist(elem[,5],breaks=10,col='black',xlab="Relevance rank",main="IGF.1 network")
hist(GS[,5],breaks=14,col='black',xlab="Relevance rank",main="Gold standard")
par(mfrow=c(2,3))
hist(elem[,4],breaks=50,col='black',xlab="Topological rank",main="IGF.1 network",xlim = range(0,150))
hist(elem[,5],breaks=10,col='black',xlab="Relevance rank",main="IGF.1 network")
hist(elem[,6],breaks=50,col='black',xlab="Expression rank",main="IGF.1 network",xlim = range(0,3))
hist(GS[,4],breaks=14,col='black',xlab="Topological rank",main="Gold standard",xlim = range(0,150))
hist(GS[,5],breaks=14,col='black',xlab="Relevance rank",main="Gold standard")
hist(GS[,6],breaks=14,col='black',xlab="Expression rank",main="Gold standard",xlim = range(0,3))
par(mfrow=c(2,3))
hist(elem[,4],breaks=100,col='black',xlab="Topological rank",main="IGF.1 network",xlim = range(0,150))
hist(elem[,5],breaks=10,col='black',xlab="Relevance rank",main="IGF.1 network")
hist(elem[,6],breaks=100,col='black',xlab="Expression rank",main="IGF.1 network",xlim = range(0,3))
hist(GS[,4],breaks=14,col='black',xlab="Topological rank",main="Gold standard",xlim = range(0,150))
hist(GS[,5],breaks=14,col='black',xlab="Relevance rank",main="Gold standard")
hist(GS[,6],breaks=14,col='black',xlab="Expression rank",main="Gold standard",xlim = range(0,3))
par(mfrow=c(2,3))
hist(elem[,4],breaks=50,col='black',xlab="Topological rank",main="IGF.1 network",xlim = range(0,150))
hist(elem[,5],breaks=10,col='black',xlab="Relevance rank",main="IGF.1 network")
hist(elem[,6],breaks=50,col='black',xlab="Expression rank",main="IGF.1 network",xlim = range(0,3))
hist(GS[,4],breaks=14,col='black',xlab="Topological rank",main="Gold standard",xlim = range(0,150))
hist(GS[,5],breaks=14,col='black',xlab="Relevance rank",main="Gold standard")
hist(GS[,6],breaks=14,col='black',xlab="Expression rank",main="Gold standard",xlim = range(0,3))
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
subdir <- ""
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
pw <- elem[,c(1,9)]
validation <- read.delim(paste(main,"COPD_MAPK_network_proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
results<-NetworkSearch_all_ppi.results.results_EGFR_tst14l6
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/s2tst12_lm_l10/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
subdir <- ""
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
pw <- elem[,c(1,9)]
validation <- read.delim(paste(main,"COPD related proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
results <- NetworkSearch_all_ppi.results.results_EGFR_tst14l6
results <- NetworkSearch_all_ppi.results.results_EGFR_tst12l10
validation <- read.delim(paste(main,"Signaling pathways proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
# change the ordering of Topological ranking so the smaller ranked chains are prefered
# Reverse topology
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
shortValidationChain(revTopResults,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)],weights)
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
subdir <- ""
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
pw <- elem[,c(1,9)]
validation <- read.delim(paste(main,"COPD_MAPK_network_proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
results <- NetworkSearch_all_ppi.results.results_EGFR_tst12l10
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
?pam
??pam
library(cluster)
?pam
??cluster
?hclust
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
subdir <- ""
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
pw <- elem[,c(1,9)]
validation <- read.delim(paste(main,"COPD related proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
results  <- NetworkSearch_all_ppi.results.results_EGFR_tst12l10
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
results<-NetworkSearch_all_ppi.results.results_EGFR_tst14l6
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
results <- NetworkSearch_all_ppi.results.results_IGF_tst19l8
results  <- NetworkSearch_all_ppi.results.results_EGFR_tst12l10
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
rankedResult <- filterByRank(revTopResults,c(2,4),1)    # topol incresing
shortValidationChain(rankedResult,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
validation <- read.delim(paste(main,"COPD_MAPK_network_proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
results <- NetworkSearch_all_ppi.results.results_EGFR_tst12l10
results <- NetworkSearch_all_ppi.results.results_EGFR_tst14l6
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
validation <- read.delim(paste(main,"COPD related proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
subdir <- ""
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
pw <- elem[,c(1,9)]
validation <- read.delim(paste(main,"COPD related proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
results <- NetworkSearch_all_ppi.results.results_EGFR_tst14l6
results <- NetworkSearch_all_ppi.results.results_EGFR_tst12l10
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/s2tst12_lm_l10/"
subdir <- ""
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
pw <- elem[,c(1,9)]
#alias <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins_Alias.txt",sep=""), dec=",",colClasses = "character")
validation <- read.delim(paste(main,"COPD_MAPK_network_proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
results<-NetworkSearch_all_ppi.results.results_EGFR_tst14l6
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
rankedResult <- filterByRank(revTopResults,c(4,2),1)    # topol incresing
shortValidationChain(rankedResult,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/IGF/"
dir <- paste("E:/Dropbox/Doksik/PhD/2014/Network search/IGF/tst",test,"/",sep="")
subdir <- paste("MaxDepth",maxDepth,"/",sep="")
outfile <- paste(dir,subdir,"Chain Search results",sep="")
nw <- read.delim(paste("E:/Dropbox/Doksik/PhD/2014/Network search/IGF/tst",test,"/s3tst",test,".txt",sep=""))
elem <- read.delim(paste("E:/Dropbox/Doksik/PhD/2014/Network search/IGF/tst",test,"/s3tst",test,"_Proteins.txt",sep=""))
rr<-elem[,6]
er<-elem[,7]
top(er)
head(er)
head(rr)
er<-rr
rr<-elem[,5]
head(rr)
test <- 19
maxDepth <- 8
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/IGF/"
dir <- paste("E:/Dropbox/Doksik/PhD/2014/Network search/IGF/tst",test,"/",sep="")
subdir <- paste("MaxDepth",maxDepth,"/",sep="")
outfile <- paste(dir,subdir,"Chain Search results",sep="")
nw <- read.delim(paste("E:/Dropbox/Doksik/PhD/2014/Network search/IGF/tst",test,"/s3tst",test,".txt",sep=""))
elem <- read.delim(paste("E:/Dropbox/Doksik/PhD/2014/Network search/IGF/tst",test,"/s3tst",test,"_Proteins.txt",sep=""))
pw <- elem[,c(1,9)]
rr<- elem[,5]
head(ss)
head(r)
head(rr)
er <- elem[,]6
er <- elem[,6]
head(er)
plot(rr,er)
plot(elem[,4:6])
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
subdir <- ""
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
pw <- elem[,c(1,9)]
validation <- read.delim(paste(main,"COPD_MAPK_network_proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
results <- NetworkSearch_all_ppi.results.results_EGFR_tst14l6
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
shortValidationChain(revTopResults,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)],weights)
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
subdir <- ""
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
pw <- elem[,c(1,9)]
validation <- read.delim(paste(main,"COPD_MAPK_network_proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
results <- NetworkSearch_all_ppi.results.results_EGFR_tst14l6
shortValidationChain(results[,c(2,5:7)],file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
# Reverse topology
shortValidationChain(revTopResults,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)],weights)
shortValidationChain(revTopResults,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)],weights)
rankedResult <- filterByRank(revTopResults,c(4,2),1)    # topol incresing
shortValidationChain(rankedResult,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
shortValidationChain(revTopResults,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)],weights)
results <- NetworkSearch_all_ppi.results.results_EGFR_tst12l10
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
# Reverse topology
shortValidationChain(revTopResults,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)],weights)
rankedResult <- filterByRank(revTopResults,c(4,2),1)    # topol incresing
shortValidationChain(rankedResult,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
rankedResult <- filterByRank(revTopResults,c(4,2),2)    # topol incresing
shortValidationChain(rankedResult,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
results <- NetworkSearch_all_ppi.results.results_EGFR_tst14l6
rankedResult <- filterByRank(revTopResults,c(4,2),2)    # topol incresing
shortValidationChain(rankedResult,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
shortValidationChain(revTopResults,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)],weights)
rankedResult <- filterByRank(revTopResults,c(2:4),2)    # topol incresing
shortValidationChain(rankedResult,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
rankedResult <- filterByRank(revTopResults,c(2:4),2)    # topol incresing
shortValidationChain(rankedResult,file=paste(dir,subdir,sep=""),validation[,1],pw,results[,c(2,5:7)])
dir
dir()
dir()[2]
source("http://bioconductor.org/biocLite.R")
biocLite()
method(var)
methods(var)
methods(class="data.frame")
browseVignette("IRanges")
browseVignettes("IRanges")
```{r}
library(Biobase)
library(GEOquery)
source("GEOquery")
biocLite("GEOquery")
geoq <- getGEO("GSE9514")
library(GEOquery)
geoq <- getGEO("GSE9514")
names(geoq)
e <- geoq[[1]]
geoq <- getGEO("GSE9514")
names(geoq)
e <- geoq[[1]]
e
dim(e)
head(e)
exprs(e)[1:3,1:3]
?exprs
dim(exprs(e))
pData(e)[1:3,1:6]
?pData
dim(pData(e))
View(pData(e)[1:3,1:6])
View(pData(e)[1:3,1:12])
dim(pData(e))
names(pData(e))
pData(e)$characteristics_ch1
fData(e)[1:3,1:3]
exprs(e)[1:3,1:3]
names(fData(e))
head(fData(e)$"Gene Symbol")
head(rownames(e))
library(parathyroidSE)
biocLite(parathyroidSE)
biocLite("parathyroidSE")
?round
?rnorm
rnorm(2)
rnorm(5)
pts = list(x=rnorm)
pts = list(x = round(rnorm(5), 2),
y = round(rnorm(5), 2))
?class
class(pts) <- "coords"
pts
asd<-pts()
?all
coords = function(x,y){
if(!is.numeric(x) || !is.numeric(y) ||
!all(is.finite(x)) || !all(is.finite(x)))
stop("invalid coordinates!")
if (length(x) != length(y))
stop("coordinate lengths differ")
pts = list(x = x, y = y)
class(pts) = "coords"
pts
}
pts <- coords(x=2:6,y=4:8)
3:6:8
pts
getX <- function(obj) obj$x
getX(pts)
getY <- function(obj) obj$y
print.coords =
function(obj)
{
print(paste("(",
format(xcoords(obj)),
", ",
format(ycoords(obj)),
")", sep = ""),
quote = FALSE)
}
print(pts)
xcoords <- function(obj) obj$x
ycoords <- function(obj) obj$y
print(pts)
?format
format(xcoords(pts)
)
?UseMethod
bbox =
function(obj)
UseMethod("bbox")
bbox
bbox.coords =
function(obj)
matrix(c(range(xcoords(obj)),
range(ycoords(obj))),
nc = 2,
dimnames = list(
c("min", "max"),
c("x:", "y:")))
bbox(pts)
c(range(xcoords(obj)),
range(ycoords(obj)))
obj=pts
c(range(xcoords(obj)),
range(ycoords(obj)))
vcoords =
function(x, y, v)
{
if (!is.numeric(x) || !is.numeric(y) ||
!is.numeric(v) ||
!all(is.finite(x)) ||
!all(is.finite(y)))
stop("invalid coordinates")
if(length(x) != length(y) ||
length(x) != length(v))
stop("argument lengths differ")
pts = list(x = x, y = y, v = v)
class(pts) = c("vcoords", "coords")
pts
}
pts = vcoords(x = round(rnorm(5), 2),
y = round(rnorm(5), 2),
v = round(runif(5, 0, 100)))
pts = vcoords(x = round(rnorm(5), 2),
y = round(rnorm(5), 2),
v = round(runif(5, 0, 100)))
values = function(obj) obj$v
pts
print.vcoords =
function(obj)
{
print(paste("(",
format(xcoords(obj)),
", ",
format(ycoords(obj)),
"; ",
format(values(obj)),
")", sep = ""),
quote = FALSE)
}
pts
cos.vcoords =
function(x)
vcoords(xcoords(x),
ycoords(x),
cos(values(x)))
cos(pts)
a=cos(pts)
a
a$x
a$v
main <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/"
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/tst/"
outfile <- paste(dir,"NetworkSearch_all_ppi results",sep="")
dir <- "E:/Dropbox/Doksik/PhD/2014/Network search/EGFR/s2tst14_lm/"
subdir <- ""
subdir <- "MaxDepth6.1"
nw <- read.delim(paste(dir,"NetworkSearch_all_PPI.txt",sep=""), dec=",")
elem <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins.txt",sep=""), dec=",",colClasses = "character")
pw <- elem[,c(1,9)]
#alias <- read.delim(paste(dir,"NetworkSearch_all_PPI_Proteins_Alias.txt",sep=""), dec=",",colClasses = "character")
#alias <- alias[,c(1,4)]
# pw <- read.delim("E:/Dropbox/Doksik/BioHelath Computing/Barcelona/Synergy/2014/VEGF example/NetworkSearch_all_PPI_Pathways 2.txt", dec=","); pathDim=3
candidates <- read.delim(paste(main,"Candidates_prot.txt",sep=""), header=T, dec=",", colClasses = "character")
# candidates <- read.delim("Candidates_prot.txt", header=T, dec=",")
targets <- read.delim(paste(main,"Targets_prot.txt",sep=""), header=T, dec=",",colClasses = "character")
# targets <- read.delim("Targets_prot.txt", header=T, dec=",",)
validation <- read.delim(paste(main,"Signaling pathways proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
validation <- read.delim(paste(main,"COPD_MAPK_network_proteins.txt",sep=""), header=T, dec=",",colClasses = "character")
# row.names(alias) <- alias[,1]
nwDim=c(3,5)
pathDim=2
scoreDim=4:6
# preprocess data, missingness
# can't delete element because it's in network, wouldn't find it. Instead = 0
missing <- which(elem[,scoreDim] == "" | is.na(elem[,scoreDim]),arr.ind=TRUE)
if(nrow(toMatrix(missing))){
for(i in 1:nrow(toMatrix(missing))){
col <- (scoreDim[1] + missing[i,2] - 1)
elem[missing[i,1],col] <- 0.0
}
}
# delete non protein interactions
nw <- nw[nw[,4] == "Protein" & nw[,6] == "Protein",]
#
# Example: convert network (sNw) with BioXM names to entrez id (alias)
#   SNW=data.frame(mapName(sNw[,1],alias),mapName(sNw[,2],alias))
mapName <- function(names,map){
row.names(map) <- map[,1]
return(map[names,2])
}
# NULL test
isOk <- function(x){
if(length(x) == 0){
return(FALSE)
}
else return(TRUE)
}
# select rows in a matrix that contains element
rowContainsElement <- function(element,matrix){
rows = matrix[unique(which(matrix == element,arr.ind=TRUE)[,1]),]
return(rows)
}
# select columns in a matrix that contains element
columnContainsElement <- function(element,matrix){
columns = matrix[,unique(which(matrix == element,arr.ind=TRUE)[,2])]
return(columns)
}
toMatrix <- function(v,mode=NULL){
if(!isOk(mode)){
if(is.vector(v)){
v=as.matrix(t(v))
}
}else{
if(is.vector(v)){
v=as.matrix(v)
}
}
return(v)
}
getEnd <- function(vector){
end = 0
len = length(vector)
while(end == 0){
end = vector[len]
len = len -1
}
return(end)
}
getMxDiff <- function(m1,m2){
l1=mclapply(seq_len(nrow(m1)), function(i) m1[i,])
l2=mclapply(seq_len(nrow(m2)), function(i) m2[i,])
getNotContainsEnd <- function(row,end){
chain=row[which(row!=0)]
if(sum(end %in% chain[1:(length(chain)-1)])==0)
{
return(row)
}
}
lc=mclapply(l1,getNotContainsEnd,end=endPos)
lcc=lc[!sapply(lc, is.null)]
wow=do.call(rbind,lapply(lcc,matrix,ncol=ncol(m1),byrow=TRUE))
W <- matrix(unlist(wow), ncol=ncol(wow),
dimnames=list(NULL, colnames(wow)))
diff=na.omit(m2[W,which=TRUE])
}
#normalize vector or matrix function
normalize <- function(x) {
if((max(x,na.rm=TRUE) - min(x, na.rm=TRUE))!=0){
(x - min(x, na.rm=TRUE))/(max(x,na.rm=TRUE) - min(x, na.rm=TRUE))
} else {
x - x
}
}
missing <- which(elem[,scoreDim] == "" | is.na(elem[,scoreDim]),arr.ind=TRUE)
if(nrow(toMatrix(missing))){
for(i in 1:nrow(toMatrix(missing))){
col <- (scoreDim[1] + missing[i,2] - 1)
elem[missing[i,1],col] <- 0.0
}
}
# delete non protein interactions
nw <- nw[nw[,4] == "Protein" & nw[,6] == "Protein",]
source("e:/Dropbox/Doksik/BioHelath Computing/Barcelona/Synergy/Files/Network Search/RankPathway_chain0.1.r")
source("e:/Dropbox/Doksik/BioHelath Computing/Barcelona/Synergy/Files/Network Search/ChainRank.r")
source(paste(mainDir,"ChainRank.R",sep=""))
source(paste(mainDir,"ChainRank.R",sep=""))
mainDir <- ""
source(paste(mainDir,"ChainRank.R",sep=""))
setwd("E:/Dropbox/Doksik/PhD/2014/Publications/ChainRank/gitHub/ChainRank")
source(paste(mainDir,"ChainRank.R",sep=""))
results <- read.delim(paste(dir,"NetworkSearch_all_ppi results results.txt",sep=""), dec=",")
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
results[,2] <- paste(results[,1],results[,2],results[,3],sep="|")
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
results <- read.delim(paste(dir,"NetworkSearch_all_ppi results results.txt",sep=""), dec=",")
results[,2] <- paste(results[,1],results[,2],results[,3],sep="|")
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
rankedResult <- filterByRank(revTopResults,c(2,4),1)    # topol increasing
source(paste(mainDir,"ChainRank.R",sep=""))
rankedResult <- FilterByRank(revTopResults,c(2,3),1)    # topol increasing
View(revTopResults)
View(results)
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
results <- read.delim(paste(dir,"NetworkSearch_all_ppi results results.txt",sep=""), dec=",",colClasses = "character")
results[,2] <- paste(results[,1],results[,2],results[,3],sep="|")
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(as.numeric(results[,5])*-1),results[,6:7])
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(results[,5]*-1),results[,6:7])
View(revTopResults)
rankedResult <- filterByRank(revTopResults,c(2,3),1)
rankedResult <- FilterByRank(revTopResults,c(2,3),1)
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(as.numeric(results[,5])*-1),as.numeric(results[,6:7]))
View(revTopResults)
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(as.numeric(results[,5])*-1),results[,6:7])
revTopResults <- data.frame(Chain=results[,2],Toplogy.score=(as.numeric(results[,5])*-1),as.numeric(results[,6:7]))
